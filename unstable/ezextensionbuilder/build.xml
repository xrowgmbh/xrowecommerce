<?xml version="1.0" encoding="iso-8859-1"?>
<!--                                                             -->
<!-- eZ Extension Builder                                        -->
<!-- an Ant build file for eZ Publish extensions                 -->
<!--                                                             -->
<!-- @author J. Renard                                           -->
<!-- @copyright Copyright (C) 2010 eZ Systems AS                 -->
<!-- @license code licensed under the GPL License: see README    -->
<!--                                                             -->
<project name="eZExtensionBuilder" default="help">

    <description>eZExtensionBuilder build file</description>

<taskdef resource="net/sf/antcontrib/antcontrib.properties">
 <classpath>
   <pathelement location="${user.home}/.ant/lib/ant-contrib-1.0b3-jar.jar"/>
 </classpath>
</taskdef>

    <!-- ================== -->
    <!-- Build properties   -->
    <!-- ================== -->

    <tstamp>
        <format property="date.now"          pattern="yyyy-mm-dd_hh:mm:ss"/>
        <format property="date.current.year" pattern="yyyy"/>
    </tstamp>

    <property name="build.dir" value="build"/>

    <!-- an extension properties file must be stored in              -->
    <!-- an 'ant' folder under the root of the extension             -->
    <!-- For example for extension ezoe this gives :                 -->
    <!-- ezoe                                                        -->
    <!--   +ant                                                      -->
    <!--      +-ezoe.properties                                      -->
    <!--                                                             -->
    <!-- the property files must be composed of the                  -->
    <!-- following variables                                         -->
    <!--                                                             -->
    <!-- <extensionname>.version.major     = xxx                     -->
    <!-- <extensionname>.version.minor     = yyy                     -->
    <!-- <extensionname>.version.release   = zzzz                    -->
    <!-- <extensionname>.svn.url           = http://url.com/to/svn/  -->
    <!--                                                             -->
    <property file="./ant/${extension.name}.properties"/>

    <patternset id="php.sources">
        <include name="**/*.php"/>
    </patternset>

    <patternset id="all.sources">
        <include name="**/*.php"/>
        <include name="**/*.css"/>
        <include name="**/*.js"/>
    </patternset>

    <patternset id="rst.sources">
        <include name="**/*.rst"/>
    </patternset>

    <patternset id="package.xml">
        <include name="**/*package.xml"/>
    </patternset>

    <!-- http://ant-contrib.sourceforge.net/tasks/tasks/propertycopy.html -->
    <propertycopy name="version.major"   from="${extension.name}.version.major"/>
    <propertycopy name="version.minor"   from="${extension.name}.version.minor"/>
    <propertycopy name="version.release" from="${extension.name}.version.release"/>
    <propertycopy name="svn.url"         from="${extension.name}.svn.url" />
    <propertycopy name="create.tarball"  from="${extension.name}.create.tarball"/>

    <property name="version.alias" value="${version.major}.${version.minor}"/>

    <!-- =================== -->
    <!-- /Build properties   -->
    <!-- =================== -->

    <!-- Shows the help message   -->
    <!-- This is default target   -->
    <!-- nothing will be built    -->
    <!-- unless clearly specified -->
    <target name="help" description="Shows this help">
        <echo message="Please run : ant -p to learn more about available targets"/>
        <antcall target="show-properties"/>
    </target>

    <!-- Shows available properties for this build file -->
    <target name="show-properties" description="Shows the properties for this build file">
        <echo message="build.dir        : ${build.dir}"/>

        <!-- extension.name should be defined as a script argument -->
        <!-- ant -Dextension.name=<extensionname>                  -->
        <echo message="extension name   : ${extension.name}"/>
    </target>

    <!-- Prepares the build directory    -->
    <!-- Creates the build/ directory if -->
    <!-- does not already exists         -->
    <target name="init" description="Prepares the extension to be built">
        <mkdir dir="${build.dir}"/>

        <echo message="Fetching code from SVN repository"/>

        <!-- svn export repository -->
        <exec executable="svn" failonerror="true">
            <arg value="-q"/>
            <arg value="export"/>
            <arg value="${svn.url}"/>
            <arg value="${build.dir}/${extension.name}"/>
        </exec>

        <available file="ant/files.to.exclude.txt" property="files.to.exclude.exists"/>

        <if>
            <equals arg1="${files.to.exclude.exists}" arg2="true"/>

            <then>
                <!-- removes all files specified in the "files.to.exclude" -->
                <loadfile srcFile="ant/files.to.exclude.txt" property="files.to.exclude"/>

                <!-- in order to get directory removed they must be appended with a '/' -->
                <!-- for example -->
                <!-- ezinfo.php  -->
                <!-- tests/      -->
                <foreach list="${files.to.exclude}" delimiter="${line.separator}" target="-purge-file" param="file.to.purge"/>
            </then>
        </if>
    </target>

    <!-- private target               -->
    <!-- Purges a file or a directory -->
    <target name="-purge-file">
        <echo message="${build.dir}/${extension.name}/${file.to.purge}"/>
        <delete includeemptydirs="true" verbose="true">
            <fileset dir="${build.dir}/${extension.name}" includes="${file.to.purge}"/>
        </delete>
    </target>

    <!-- Builds the extension -->
    <target name="build" depends="init" description="Builds the extension">
        <delete dir="${build.dir}/${extension.name}/ant"/>
        <delete file="${build.dir}/${extension.name}/build.xml"/>
        <delete dir="${build.dir}/${extension.name}/tests"/>

        <antcall target="update-ezinfo"/>
        <antcall target="update-license-headers"/>
        <antcall target="generate-documentation"/>
        <antcall target="generate-md5sums"/>
        <antcall target="check-sql-files"/>
        <antcall target="check-gnu-files"/>
        <antcall target="eznetwork-certify"/>
        <antcall target="update-package-xml"/>
        <antcall target="generate-ezpackage-xml-definition"/>
        <antcall target="create-package-tarballs"/>
    </target>

    <!-- Removes the entire build/ directory -->
    <target name="clean" description="Removes the entire build directory">
        <delete dir="${build.dir}"/>
    </target>

    <!-- Removes build/ and dist/ -->
    <target name="clean-all" description="Removes the build/ and the dist/ directory">
        <antcall target="clean"/>
        <antcall target="dist-clean"/>
    </target>

    <!-- Creates a tarball of the latest build -->
    <target name="dist" description="Creates a tarball of the built extension">
        <if>
            <equals arg1="${create.tarball}" arg2="yes"/>
        <then>
            <mkdir dir="dist"/>
            <tar destfile="dist/${extension.name}-${version.alias}.${version.release}.tar.gz"
                compression="gzip"
                longfile="gnu"
                basedir="${build.dir}"/>
        </then>
        <else>
            <echo message="Tarball creating disabled, skipping"/>
        </else>
        </if>
    </target>

    <!-- Build the extension and generate the tarball -->
    <target name="all" description="Build the extension and generate the tarball">
        <antcall target="build"/>
        <antcall target="dist"/>
        <antcall target="build-dependencies"/>
    </target>

    <!-- Removes the generated tarball -->
    <target name="dist-clean" description="Removes the generated tarball">
        <delete dir="dist"/>
    </target>

    <!-- Updates ezinfo.php                                                           -->
    <!-- Uses a regular expression to search and replace the correct string           -->
    <!-- Within the file, please note there is a limit of 25 sets to indent 3rd party -->
    <!-- lib version numbers, if you use more than 25 spaces the version number will  -->
    <!-- not be updated correctly                                                     -->
    <target name="update-ezinfo" description="Updates ezinfo.php with correct version numbers">
        <echo message="Updating ezinfo.php"/>

        <replaceregexp byline="true">
            <!-- 'Version' => 'xxxxxx', -->
            <!-- The limit of spaces is set to 25 otherwise 3rd party version strings -->
            <!-- will be replaced as well and we do not want that                     -->
            <regexp pattern="^([\s]{1,25}\047Version\047[\s]+=>[\s]+\047)(.*)(\047,)$"/>
            <substitution expression='\1${version.alias}-${version.release}\3'/>
            <fileset dir="${build.dir}" includes="**/*ezinfo.php"/>
        </replaceregexp>
    </target>

    <!-- Updated the SOFTWARE LICENSE    -->
    <!-- header in each source code file -->
    <target name="update-license-headers" description="Update license headers in source code files">
        <echo message="Updating license headers"/>

        <!-- SOFTWARE RELEASE -->
        <replaceregexp byline="true">
            <regexp pattern="// SOFTWARE RELEASE: (.*)"/>
            <substitution expression="// SOFTWARE RELEASE: ${version.alias}-${version.release}"/>
            <fileset dir="${build.dir}">
                <patternset refid="all.sources"/>
            </fileset>
        </replaceregexp>

        <!-- COPYRIGHT NOTICE -->
        <replaceregexp byline="true">
            <regexp pattern="// COPYRIGHT NOTICE: Copyright \(C\) 1999-[\d]{4} eZ Systems AS"/>
            <substitution expression="// COPYRIGHT NOTICE: Copyright (C) 1999-${date.current.year} eZ Systems AS"/>
            <fileset dir="${build.dir}">
                <patternset refid="all.sources"/>
            </fileset>
        </replaceregexp>
    </target>

    <!-- Generates the documentation out of .rst files -->
    <!-- This requires the rst2html.py tool available  -->
    <!-- at : http://docutils.sourceforge.net/         -->
    <target name="generate-documentation" description="Generates the document of the extension, if created in RST">
        <echo message="Building documentation"/>

        <mapper id="rstout"
                type="glob"
                from="${build.dir}/${extension.name}/doc/*.rst"
                to="${build.dir}/${extension.name}/doc/*.html"/>

        <apply executable="rst2html.py" failonerror="true">
            <fileset dir="${build.dir}">
                <patternset refid="rst.sources"/>
            </fileset>
            <srcfile/>
            <redirector>
                <outputmapper refid="rstout"/>
            </redirector>
        </apply>

        <!-- A few extension have Makefiles to generate documentation -->
        <!-- We have to remove them as well as original .rst files    -->
        <delete>
            <fileset dir="${build.dir}">
                <patternset refid="rst.sources"/>
                <include name="**/Makefile"/>
            </fileset>
        </delete>
    </target>

    <!-- Launch the ezp unit test suite                          -->
    <!-- For more information on how to write                    -->
    <!-- unit tests for an extension please go to                -->
    <!-- http://ezpedia.org/en/ez/testing_ez_publish_test_system -->
    <!-- This is a standalone target, it is not possible to run  -->
    <!-- the unit test site from within the build                -->
    <!-- The developpment of this target is in stand by since we -->
    <!-- have to discuss a few things about login credentials    -->
    <!-- the database first                                      -->
    <target name="tests" description="Launch unit tests if any">
        <echo message="Not Implemented Yet"/>
    </target>

    <!-- Checks for coding standard for the current extension     -->
    <!-- This requires PHPCodeSniffer for more informations       -->
    <!-- please go to http://pear.php.net/package/PHP_CodeSniffer -->
    <target name="coding-standards-check" description="Checks PHP code coding standard, requires PHPCodeSniffer">
        <echo message="Not Implemented Yet"/>
    </target>

    <!-- Generates a md5sum file with md5 sums of all source file -->
    <target name="generate-md5sums" description="Generates an MD5 file with all md5 sums of source code files">
        <echo message="Creating MD5 sums"/>

        <!-- If the extension is delivered as an ezpackage -->
        <!-- then the filelist.md5 should be stored in the -->
        <!-- correct subdirectory                          -->
        <available file="${extension.name}"
                   filepath="${build.dir}/${extension.name}/packages/${extension.name}_extension/ezextension/"
                   property="package.exists"/>

        <if>
            <equals arg1="${package.exists}" arg2="true"/>
            <then>
                <property name="fileset.dir"       value="${build.dir}/${extension.name}/packages/${extension.name}_extension/ezextension/${extension.name}"/>
                <property name="filelist.md5.path" value="${fileset.dir}" />
                <property name="trim.regex"        value="${user.dir}/${filelist.md5.path}/"/>
            </then>
            <else>
                <property name="fileset.dir"       value="${build.dir}/${extension.name}"/>
                <property name="filelist.md5.path" value="${fileset.dir}"/>
                <property name="trim.regex"        value="${user.dir}/${fileset.dir}/"/>
            </else>
        </if>

        <echo  message="${filelist.md5.path}/share/filelist.md5" />

        <mkdir dir="${filelist.md5.path}/share"/>

        <!-- Creates the checksum list -->
        <apply executable="md5sum" failonerror="true" dir="${build.dir}/${extension.name}">
            <fileset dir="${fileset.dir}">
                <patternset id="all.sources"/>
            </fileset>
            <srcfile/>
            <redirector output="${filelist.md5.path}/share/filelist.md5" append="true"/>
        </apply>

        <!-- removes the absolute part of the path -->
        <!-- and only let the relative one         -->
        <replaceregexp byline="true">
            <regexp pattern="${trim.regex}"/>
            <substitution expression=""/>
            <fileset file="${filelist.md5.path}/share/filelist.md5"/>
        </replaceregexp>
    </target>

    <!-- Checks if a schema.sql file is present for -->
    <!-- any supported database                     -->
    <!--                                            -->
    <!-- The accepted directory structure is :      -->
    <!--                                            -->
    <!-- myextension                                -->
    <!-- `__ sql                                    -->
    <!--     |__ mysql                              -->
    <!--     |   |__ cleandata.sql                  -->
    <!--     |   `__ schema.sql                     -->
    <!--     |__ oracle                             -->
    <!--     |   |__ cleandata.sql                  -->
    <!--     |   `__ schema.sql                     -->
    <!--     `__ postgresql                         -->
    <!--         |__ cleandata.sql                  -->
    <!--         `__ schema.sql                     -->
    <!--                                            -->
    <target name="check-sql-files" description="Checks if a schema.sql / cleandata.sql is available for supported databases">
        <echo message="Checking for schema.sql and cleandata.sql"/>
        <echo message="Use 'php bin/php/ezsqldumpschema.php --output-types=all --format=generic --type=mysql --output-array --user=someuser --password=somepassword somedatabase database.dba' if you want to build your own"/>

        <available file="sql"
                   filepath="${build.dir}/${extension.name}"
                   property="sql.dir.exists"/>

        <if>
            <equals arg1="${sql.dir.exists}" arg2="true"/>
            <then>
                <!-- mysql/schema.sql -->
                <available file="schema.sql"
                        filepath="${build.dir}/${extension.name}/sql/mysql"
                        property="mysql.schema.exists"/>
                <antcall target="-fail-if-file-empty">
                    <param name="file.name" value="${build.dir}/${extension.name}/sql/mysql/schema.sql"/>
                </antcall>

                <!-- mysql/cleandata.sql -->
                <available file="cleandata.sql"
                        filepath="${build.dir}/${extension.name}/sql/mysql"
                        property="mysql.cleandata.exists"/>
                <antcall target="-fail-if-file-empty">
                    <param name="file.name" value="${build.dir}/${extension.name}/sql/mysql/cleandata.sql"/>
                </antcall>

                <!-- postgresql/schema.sql -->
                <available file="schema.sql"
                        filepath="${build.dir}/${extension.name}/sql/postgresql"
                        property="postgresql.schema.exists"/>
                <antcall target="-fail-if-file-empty">
                    <param name="file.name" value="${build.dir}/${extension.name}/sql/postgresql/schema.sql"/>
                </antcall>

                <!-- postgresql/cleandata.sql -->
                <available file="cleandata.sql"
                        filepath="${build.dir}/${extension.name}/sql/postgresql"
                        property="postgresql.cleandata.exists"/>
                <antcall target="-fail-if-file-empty">
                    <param name="file.name" value="${build.dir}/${extension.name}/sql/postgresql/cleandata.sql"/>
                </antcall>

                <!-- oracle/schema.sql -->
                <available file="schema.sql"
                        filepath="${build.dir}/${extension.name}/sql/oracle"
                        property="oracle.schema.exists"/>
                <antcall target="-fail-if-file-empty">
                    <param name="file.name" value="${build.dir}/${extension.name}/sql/oracle/schema.sql"/>
                </antcall>

                <!-- oracle/cleandata.sql -->
                <available file="cleandata.sql"
                        filepath="${build.dir}/${extension.name}/sql/oracle"
                        property="oracle.cleandata.exists"/>
                <antcall target="-fail-if-file-empty">
                    <param name="file.name" value="${build.dir}/${extension.name}/sql/oracle/cleandata.sql"/>
                </antcall>

                <!-- Last but not least, .dba files -->
                <!-- share/db_schema.dba -->
                <available file="db_schema.dba"
                        filepath="${build.dir}/${extension.name}/share/"
                        property="db.schema.dba.exists"/>
                <antcall target="-fail-if-file-empty">
                    <param name="file.name" value="${build.dir}/${extension.name}/share/db_schema.dba"/>
                </antcall>

                <!-- share/db_schema.dba -->
                <available file="db_data.dba"
                        filepath="${build.dir}/${extension.name}/share/"
                        property="db.data.dba.exists"/>
                <antcall target="-fail-if-file-empty">
                    <param name="file.name" value="${build.dir}/${extension.name}/share/db_data.dba"/>
                </antcall>
            </then>
            <else>
                <echo message="This extension does not do anything on the database, skipping"/>
            </else>
        </if>
    </target>

    <target name="-fail-if-file-empty" description="checks if a file exists but fails if it is empty">
        <available file="${file.name}" property="file.exists"/>

        <if>
            <and>
                <istrue value="${file.exists}"/>
                <length file="${file.name}" when="equal" length="0" />
            </and>
            <then>
                <fail message="${file.name} must not be empty, please remove it or add contents into it"/>
            </then>
        </if>
        <var name="file.exists" unset="true"/>
    </target>

    <!-- Runs the eZ Network certification utility -->
    <!-- This requires the ez_network extension    -->
    <target name="eznetwork-certify" description="Runs the certification script, requires the latest eZNetwork extension">
        <echo message="Not Implemented Yet"/>
    </target>

    <!-- Checks for the presence of LICENSE and README files -->
    <!-- These files must be located below the root directory of the extension -->
    <target name="check-gnu-files" description="Checks for LICENSE and README files">
        <echo message="Checking for LICENSE and README files"/>

        <!-- Figure out if we need to check in packages -->
        <available file="${extension.name}/packages/${extension.name}_extension/ezextension/${extension.name}"
                   filepath="${build.dir}"
                   property="package.dir.exists" />

        <!-- LICENSE -->
        <available file="LICENSE"
                   filepath="${build.dir}/${extension.name}"
                   property="gnu.license.extension.exists"/>

        <available file="LICENSE"
                   filepath="${build.dir}/${extension.name}/packages/${extension.name}_extension/ezextension/${extension.name}"
                   property="gnu.license.package.exists"/>

        <if>
            <and>
                <isfalse value="${package.dir.exists}" />
                <isfalse value="${gnu.license.extension.exists}"/>
            </and>
            <then>
                <fail message="LICENSE file doesn't exist!"/>
            </then>
        </if>

        <if>
            <and>
                <istrue value="${package.dir.exists}" />
                <isfalse value="${gnu.license.package.exists}" />
            </and>
            <then>
                <fail message="LICENSE file doesn't exist in package folder!" />
            </then>
        </if>

        <!-- README -->
        <available file="README"
                   filepath="${build.dir}/${extension.name}"
                   property="gnu.readme.extension.exists"/>

        <available file="README"
                   filepath="${build.dir}/${extension.name}/packages/${extension.name}_extension/ezextension/${extension.name}"
                   property="gnu.readme.package.exists"/>

        <if>
            <and>
                <isfalse value="${package.dir.exists}" />
                <isfalse value="${gnu.readme.extension.exists}" />
            </and>
            <then>
                <fail message="README file doesn't exist!" />
            </then>
        </if>
        
        <if>
            <and>
                <istrue value="${package.dir.exists}" />
                <isfalse value="${gnu.readme.package.exists}" />
            </and>
            <then>
                <fail message="README file doesn't exist in package folder!"/>
            </then>
        </if>
    </target>

    <!-- Generates an XML definition for eZ Publish extension package types       -->
    <!-- Only useful if you want to build your extension as an eZ Publish package -->
    <target name="generate-ezpackage-xml-definition" description="Generates an XML definition for eZ Publish extension package types">
        <available file="${extension.name}/packages/${extension.name}_extension/ezextension/${extension.name}"
                   filepath="${build.dir}"
                   property="ezpackage.xml.exists"/>

        <if>
            <equals arg1="${ezpackage.xml.exists}" arg2="true"/>
            <then>
                <echo message="Building XML file list for extension ${extension.name}"/>

                <get src="http://svn.projects.ez.no/ezextensionbuilder/trunk/ezpxmlextfilelist.php"
                     dest="ezpxmlextfilelist.php"
                     usetimestamp="true"/>

                <exec executable="php" failonerror="true">
                    <arg value="./ezpxmlextfilelist.php"/>
                    <arg value="-e"/>
                    <arg value="${build.dir}/${extension.name}/packages/${extension.name}_extension/ezextension/${extension.name}"/>
                    <arg value="-n"/>
                    <arg value="${extension.name}"/>
                    <redirector output="${build.dir}/${extension.name}/packages/${extension.name}_extension/ezextension/extension-${extension.name}.xml" append="false"/>
                </exec>

                <delete file="ezpxmlextfilelist.php"/>
            </then>
            <else>
                <echo message="No packages found no need to generate anything"/>
            </else>
        </if>
    </target>

    <!-- Updates package.xml version numbers          -->
    <!-- This is mainly useful for eZFlow and eZWebin -->
    <target name="update-package-xml" description="Updates version numbers in package.xml">
        <echo message="Updating package.xml with correct version numbers"/>

        <!-- <version>xxx</version> -->
        <replaceregexp byline="true" flags="m">
            <regexp pattern='^(    \074version\076)(.*)(\074/version\076)$'/>
            <substitution expression='\1${ezp.version.major}.${ezp.version.minor}.${ezp.version.release}\3'/>
            <fileset dir="${build.dir}">
                <patternset id="package.xml"/>
            </fileset>
        </replaceregexp>

        <!-- <named-version>xxx</named-version> -->
        <replaceregexp byline="true" flags="m">
            <regexp pattern='^(    \074named-version\076)(.*)(\074/named-version\076)$'/>
            <substitution expression='\1${ezp.version.major}.${ezp.version.minor}\3'/>
            <fileset dir="${build.dir}">
                <patternset id="package.xml"/>
            </fileset>
        </replaceregexp>

        <!-- <package version="zzzz" -->
        <replaceregexp byline="true">
            <regexp pattern='^(\074package version=")(.*)(")$'/>
            <substitution expression='\1${version.major}.${version.minor}-${version.release}\3'/>
            <fileset dir="${build.dir}">
                <patternset id="package.xml"/>
            </fileset>
        </replaceregexp>

        <!-- <number>xxxx</number> -->
        <replaceregexp byline="true">
            <regexp pattern='^(    \074number\076)(.*)(\074/number\076)$'/>
            <substitution expression='\1${version.alias}\3'/>
            <fileset dir="${build.dir}">
                <patternset id="package.xml"/>
            </fileset>
        </replaceregexp>

        <!-- <release>yyy</release> -->
        <replaceregexp byline="true">
            <regexp pattern='^(    \074release\076)(.*)(\074/release\076)$'/>
            <substitution expression='\1${version.release}\3'/>
            <fileset dir="${build.dir}">
                <patternset id="package.xml"/>
            </fileset>
        </replaceregexp>
    </target>

    <!-- Build dependant extensions                                                           -->
    <!-- In order to add a new dependency                                                     -->
    <!-- You must add the following properties                                                -->
    <!-- in your current extension                                                            -->
    <!-- external.dependency.<extension-name>.repository = http://url/to/ext/repository       -->
    <!--                                                                                      -->
    <!-- The build system expects the dependant extension follow the same directory structure -->
    <!-- as described in the README file                                                      -->
    <target name="build-dependencies" description="Build dependent extensions">

        <!-- fetches the list of available dependencies -->
        <!-- \1 : extension name -->
        <propertyselector property="dependency.list"
                                delimiter=","
                                match="${extension.name}.external.dependency.([^\.]*)"
                                select="\1"
                                casesensitive="false" />

        <if>
            <isset property="dependency.list"/>
            <then>
                <foreach list="${dependency.list}"
                        delimiter=","
                        target="-build-dependency"
                        param="dependant.extension.name"/>
            </then>
        </if>
    </target>

    <!-- Note this is a private target !!! -->
    <target name="-build-dependency" description="Builds a dependency">
        <echo message="Building dependant extension : ${dependant.extension.name}"/>

        <delete dir="${build.dir}/packages"/>

        <propertycopy name="dependant.extension.repository" from="${extension.name}.external.dependency.${dependant.extension.name}.repository"/>

        <!-- downloading build file -->
        <!--
        <get src="${dependant.extension.repository}/build.xml"
            dest="${dependant.extension.name}-build.xml"/>
        -->

        <!-- downloading properties file -->
        <get src="${dependant.extension.repository}/ant/${dependant.extension.name}.properties"
            dest="ant/${dependant.extension.name}.properties"
            usetimestamp="true"/>

        <var name="extension.name"  unset="true"/>
        <var name="svn.url"         unset="true"/>
        <var name="version.major"   unset="true"/>
        <var name="version.minor"   unset="true"/>
        <var name="version.release" unset="true"/>
        <var name="version.alias"   unset="true"/>

        <ant antfile="build.xml"
            dir="."
            target="all"
            inheritAll="true">
            <property name="extension.name" value="${dependant.extension.name}"/>
        </ant>

        <delete file="ant/${dependant.extension.name}.properties"/>

        <!-- <delete file="${dependant.extension.name}-build.xml"/> -->
    </target>

    <!-- Creates a tarball for each ezpackage                             -->
    <!-- in order to use this target the <extension.name>.properties file -->
    <!-- must contain the following properties                            -->
    <!--                                                                  -->
    <!-- <extensionname>.package.<packagename>.name = <packagename>       -->
    <target name="create-package-tarballs" description="Creates tarballs for ezpackages.">

        <get src="http://svn.projects.ez.no/ezextensionbuilder/trunk/createzpkg.sh"
             dest="createzpkg.sh"
             usetimestamp="true"/>

        <chmod file="createzpkg.sh" perm="ug+x"/>

        <!-- fetches the list of available dependencies -->
        <!-- \1 : extension name -->
        <propertyselector property="ezpackage.list"
                                delimiter=","
                                match="^${extension.name}.package.([^\.]*)$"
                                select="\1"
                                casesensitive="false" />

        <if>
            <isset property="ezpackage.list"/>
            <then>
                <foreach list="${ezpackage.list}"
                        delimiter=","
                        target="-create-package-tarball"
                        param="ezpackage.name"/>
            </then>
        </if>

        <delete file="createzpkg.sh"/>
    </target>

    <!-- Note this is a private target !!! -->
    <target name="-create-package-tarball" description="Creates a tarball of an ezpackage.">
        <echo message="Building ${ezpackage.name}.ezpkg"/>

        <!-- Switched to the system tar command                             -->
        <!-- Ref : https://issues.apache.org/bugzilla/show_bug.cgi?id=47653 -->
        <copy file="createzpkg.sh" tofile="${build.dir}/${extension.name}/packages/${ezpackage.name}/createzpkg.sh"/>

        <exec executable ="sh"
              dir ="${build.dir}/${extension.name}/packages/${ezpackage.name}"
              failonerror="true">
            <arg value="./createzpkg.sh"/>
            <arg value="*"/>
            <arg value="../../../../${build.dir}/${ezpackage.name}"/>
        </exec>

        <delete file="${build.dir}/${extension.name}/packages/${ezpackage.name}/createzpkg.sh"/>
    </target>
</project>